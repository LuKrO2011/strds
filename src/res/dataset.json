{
  "repositories": [
    {
      "git_commit_hash": "2a797303b2b0e988f8063fc1d418f65c821efa97",
      "modules": [
        {
          "classes": [],
          "file_path": "setup.py",
          "functions": [
            {
              "annotations": "",
              "body": "def extract_scripts(root_dir: str) -> List[str]:\n    return glob.glob(join(root_dir, '*'))",
              "col_offset": 5,
              "full_signature": "extract_scripts(root_dir: str) -> List[str]",
              "line_number": 14,
              "name": "extract_scripts",
              "parameters": [
                {
                  "col_offset": 21,
                  "line_number": 14,
                  "name": "root_dir",
                  "type": "str"
                }
              ],
              "return_type": "List[str]",
              "signature": "extract_scripts(root_dir: str) -> List[str]"
            }
          ],
          "name": "setup"
        },
        {
          "classes": [],
          "file_path": "mlvtools/gen_dvc.py",
          "functions": [
            {
              "annotations": "",
              "body": "def get_dvc_template_data(docstring_info: DocstringInfo, working_directory: str,\n                          python_cmd_path: str, meta_file_variable_name: str,\n                          meta_file_root_dir_path: str, extra_variables: dict = None):\n    \"\"\"\n        Format data from docstring for dvc bash command template\n    \"\"\"\n    logging.info('Build data for DVC command generation using template')\n    dvc_params = get_dvc_params(docstring_info.docstring)\n    variables = [] if not extra_variables else [f'{name}=\"{value}\"' for name, value in extra_variables.items()]\n    meta_file_name = dvc_params.meta_file_name or to_dvc_meta_filename(python_cmd_path)\n    meta_file_name = join(meta_file_root_dir_path, meta_file_name)\n\n    info = {\n        'variables': variables,\n        'meta_file_name_var_assign': f'{meta_file_variable_name}=\"{meta_file_name}\"',\n        'meta_file_name_var': meta_file_variable_name,\n        'whole_command': None,\n        'python_script': python_cmd_path,\n        'working_directory': working_directory,\n        'dvc_inputs': [],\n        'dvc_outputs': [],\n        'dvc_outputs_persist': [],\n        'python_params': ''\n    }\n\n    if dvc_params.dvc_cmd:\n        logging.info('DVC mode: whole command provided')\n        info['whole_command'] = dvc_params.dvc_cmd.cmd.replace('\\n', ' \\\\\\n')\n        logging.debug(f'Custom command {info[\"whole_command\"]}')\n        return info\n\n    logging.info('DVC mode: generate command from parameters')\n    python_params = []\n\n    def handle_params(dvc_docstring_params: List[DocstringDvc], label: str):\n        for dvc_param in dvc_docstring_params:\n            if dvc_param.related_param:\n                variable_name = to_bash_variable(dvc_param.related_param)\n                py_cmd_param = to_cmd_param(dvc_param.related_param)\n                info['variables'].append(f'{variable_name}=\"{dvc_param.file_path}\"')\n                python_params.append(f'--{py_cmd_param} ${variable_name}')\n                info[label].append(f'${variable_name}')\n            else:\n                info[label].append(dvc_param.file_path)\n\n    for extra_param in dvc_params.dvc_extra:\n        python_params.append(extra_param.extra)\n\n    handle_params(dvc_params.dvc_in, 'dvc_inputs')\n    handle_params(dvc_params.dvc_out, 'dvc_outputs')\n    handle_params(dvc_params.dvc_out_persist, 'dvc_outputs_persist')\n    info['python_params'] = ' '.join(python_params)\n    logging.debug(f'Template info: {info}')\n    return info",
              "col_offset": 5,
              "full_signature": "get_dvc_template_data(docstring_info: DocstringInfo, working_directory: str, python_cmd_path: str, meta_file_variable_name: str, meta_file_root_dir_path: str, extra_variables: dict)",
              "line_number": 20,
              "name": "get_dvc_template_data",
              "parameters": [
                {
                  "col_offset": 27,
                  "line_number": 20,
                  "name": "docstring_info",
                  "type": "DocstringInfo"
                },
                {
                  "col_offset": 58,
                  "line_number": 20,
                  "name": "working_directory",
                  "type": "str"
                },
                {
                  "col_offset": 27,
                  "line_number": 21,
                  "name": "python_cmd_path",
                  "type": "str"
                },
                {
                  "col_offset": 49,
                  "line_number": 21,
                  "name": "meta_file_variable_name",
                  "type": "str"
                },
                {
                  "col_offset": 27,
                  "line_number": 22,
                  "name": "meta_file_root_dir_path",
                  "type": "str"
                },
                {
                  "col_offset": 57,
                  "line_number": 22,
                  "name": "extra_variables",
                  "type": "dict"
                }
              ],
              "return_type": null,
              "signature": "get_dvc_template_data(docstring_info: DocstringInfo, working_directory: str, python_cmd_path: str, meta_file_variable_name: str, meta_file_root_dir_path: str, extra_variables: dict)"
            },
            {
              "annotations": "",
              "body": "def gen_dvc_command(input_path: str, dvc_output_path: str, conf: MlVToolConf, docstring_conf: dict = None):\n    logging.info(f'Generate DVC command \"{dvc_output_path}\" from \"{input_path}\"')\n    logging.debug(f'Global configuration {conf}')\n    logging.debug(f'Docstring configuration {docstring_conf}')\n\n    docstring_info = extract_docstring_from_file(input_path, docstring_conf)\n\n    python_cmd_rel_path = relpath(input_path, conf.top_directory)\n    extra_var = {conf.dvc_var_python_cmd_path: python_cmd_rel_path,\n                 conf.dvc_var_python_cmd_name: basename(python_cmd_rel_path)}\n    info = get_dvc_template_data(docstring_info,\n                                 conf.top_directory,\n                                 python_cmd_rel_path,\n                                 conf.dvc_var_meta_filename,\n                                 conf.path.dvc_metadata_root_dir if conf.path else '',\n                                 extra_var)\n\n    templates_path = join(CURRENT_DIR, 'templates', DVC_CMD_TEMPLATE_NAME)\n    write_template(dvc_output_path, templates_path, info=info)\n\n    logging.log(logging.WARNING + 1, f'DVC bash command successfully generated in {dvc_output_path}')",
              "col_offset": 5,
              "full_signature": "gen_dvc_command(input_path: str, dvc_output_path: str, conf: MlVToolConf, docstring_conf: dict)",
              "line_number": 76,
              "name": "gen_dvc_command",
              "parameters": [
                {
                  "col_offset": 21,
                  "line_number": 76,
                  "name": "input_path",
                  "type": "str"
                },
                {
                  "col_offset": 38,
                  "line_number": 76,
                  "name": "dvc_output_path",
                  "type": "str"
                },
                {
                  "col_offset": 60,
                  "line_number": 76,
                  "name": "conf",
                  "type": "MlVToolConf"
                },
                {
                  "col_offset": 79,
                  "line_number": 76,
                  "name": "docstring_conf",
                  "type": "dict"
                }
              ],
              "return_type": null,
              "signature": "gen_dvc_command(input_path: str, dvc_output_path: str, conf: MlVToolConf, docstring_conf: dict)"
            }
          ],
          "name": "gen_dvc"
        },
        {
          "classes": [
            {
              "fields": [],
              "methods": [
                {
                  "annotations": "",
                  "body": "def get_conf(self, working_dir_arg: str, input_file_arg: str, conf_path_arg: str) -> MlVToolConf:\n        conf_path = conf_path_arg or get_conf_file_default_path(working_dir_arg)\n        return load_conf_or_default(conf_path, working_dir_arg)",
                  "col_offset": 9,
                  "full_signature": "CommandHelper.get_conf(self, working_dir_arg: str, input_file_arg: str, conf_path_arg: str) -> MlVToolConf",
                  "is_constructor": false,
                  "line_number": 37,
                  "name": "get_conf",
                  "parameters": [
                    {
                      "col_offset": 18,
                      "line_number": 37,
                      "name": "self",
                      "type": null
                    },
                    {
                      "col_offset": 24,
                      "line_number": 37,
                      "name": "working_dir_arg",
                      "type": "str"
                    },
                    {
                      "col_offset": 46,
                      "line_number": 37,
                      "name": "input_file_arg",
                      "type": "str"
                    },
                    {
                      "col_offset": 67,
                      "line_number": 37,
                      "name": "conf_path_arg",
                      "type": "str"
                    }
                  ],
                  "return_type": "MlVToolConf",
                  "signature": "CommandHelper.get_conf(self, working_dir_arg: str, input_file_arg: str, conf_path_arg: str) -> MlVToolConf"
                }
              ],
              "name": "CommandHelper",
              "superclasses": []
            }
          ],
          "file_path": "mlvtools/cmd.py",
          "functions": [],
          "name": "cmd"
        },
        {
          "classes": [],
          "file_path": "mlvtools/ipynb_to_python.py",
          "functions": [
            {
              "annotations": "",
              "body": "def get_config(template_path: str) -> Dict[str, Dict[str, str]]:\n    return {'TemplateExporter': {'template_file': template_path},\n            'NbConvertApp': {'export_format': 'python'}}",
              "col_offset": 5,
              "full_signature": "get_config(template_path: str) -> Dict[str, Dict[str, str]]",
              "line_number": 28,
              "name": "get_config",
              "parameters": [
                {
                  "col_offset": 16,
                  "line_number": 28,
                  "name": "template_path",
                  "type": "str"
                }
              ],
              "return_type": "Dict[str, Dict[str, str]]",
              "signature": "get_config(template_path: str) -> Dict[str, Dict[str, str]]"
            },
            {
              "annotations": "",
              "body": "def export_to_script(input_notebook_path: str, output_path: str, conf: MlVToolConf):\n    \"\"\"\n        Export a notebook to a parameterize Python 3 script\n        using Jinja templates\n    \"\"\"\n    logging.info(f'Generate Python script {output_path} from Jupyter Notebook {input_notebook_path}')\n    logging.debug(f'Global Configuration: {conf}')\n    logging.debug(f'Template path {TEMPLATE_PATH}')\n\n    script_content = get_converted_script(input_notebook_path, conf)\n\n    if not script_content:\n        logging.warning('Empty notebook provided. Nothing to do.')\n        return\n    write_python_script(script_content, output_path)\n    logging.log(logging.WARNING + 1, f'Python script successfully generated in {abspath(output_path)}')",
              "col_offset": 5,
              "full_signature": "export_to_script(input_notebook_path: str, output_path: str, conf: MlVToolConf)",
              "line_number": 33,
              "name": "export_to_script",
              "parameters": [
                {
                  "col_offset": 22,
                  "line_number": 33,
                  "name": "input_notebook_path",
                  "type": "str"
                },
                {
                  "col_offset": 48,
                  "line_number": 33,
                  "name": "output_path",
                  "type": "str"
                },
                {
                  "col_offset": 66,
                  "line_number": 33,
                  "name": "conf",
                  "type": "MlVToolConf"
                }
              ],
              "return_type": null,
              "signature": "export_to_script(input_notebook_path: str, output_path: str, conf: MlVToolConf)"
            },
            {
              "annotations": "",
              "body": "def get_converted_script(input_notebook_path: str, conf: MlVToolConf) -> str:\n    \"\"\"\n        Extract notebook python content using nbconvert\n    \"\"\"\n    exporter = PythonExporter(get_config(TEMPLATE_PATH))\n    exporter.register_filter(name='filter_trailing_cells',\n                             jinja_filter=filter_trailing_cells)\n    exporter.register_filter(name='get_formatted_cells',\n                             jinja_filter=get_formatted_cells)\n    exporter.register_filter(name='get_data_from_docstring',\n                             jinja_filter=get_data_from_docstring)\n    exporter.register_filter(name='sanitize_method_name',\n                             jinja_filter=to_method_name)\n    resources = {'ignore_keys': conf.ignore_keys}\n    logging.debug(f'Template info {resources}')\n    try:\n        script_content, _ = exporter.from_filename(input_notebook_path, resources=resources)\n    except Exception as e:\n        raise MlVToolException(e) from e\n    return script_content",
              "col_offset": 5,
              "full_signature": "get_converted_script(input_notebook_path: str, conf: MlVToolConf) -> str",
              "line_number": 51,
              "name": "get_converted_script",
              "parameters": [
                {
                  "col_offset": 26,
                  "line_number": 51,
                  "name": "input_notebook_path",
                  "type": "str"
                },
                {
                  "col_offset": 52,
                  "line_number": 51,
                  "name": "conf",
                  "type": "MlVToolConf"
                }
              ],
              "return_type": "str",
              "signature": "get_converted_script(input_notebook_path: str, conf: MlVToolConf) -> str"
            },
            {
              "annotations": "",
              "body": "def get_arguments_as_param(docstring_data: Docstring) -> str:\n    \"\"\"\n        Get formatted parameter for python method call\n    \"\"\"\n    return ', '.join([f'args.{arg.arg_name}' for arg in docstring_data.params])",
              "col_offset": 5,
              "full_signature": "get_arguments_as_param(docstring_data: Docstring) -> str",
              "line_number": 92,
              "name": "get_arguments_as_param",
              "parameters": [
                {
                  "col_offset": 28,
                  "line_number": 92,
                  "name": "docstring_data",
                  "type": "Docstring"
                }
              ],
              "return_type": "str",
              "signature": "get_arguments_as_param(docstring_data: Docstring) -> str"
            },
            {
              "annotations": "",
              "body": "def get_param_as_python_method_format(docstring_data: Docstring) -> str:\n    \"\"\"\n        Extract parameters from a docstring then format them\n    \"\"\"\n    return ', '.join(f'{p.arg_name}' for p in docstring_data.params)",
              "col_offset": 5,
              "full_signature": "get_param_as_python_method_format(docstring_data: Docstring) -> str",
              "line_number": 99,
              "name": "get_param_as_python_method_format",
              "parameters": [
                {
                  "col_offset": 39,
                  "line_number": 99,
                  "name": "docstring_data",
                  "type": "Docstring"
                }
              ],
              "return_type": "str",
              "signature": "get_param_as_python_method_format(docstring_data: Docstring) -> str"
            },
            {
              "annotations": "",
              "body": "def get_docstring_data(cell_content: str) -> Tuple[Docstring, str]:\n    \"\"\"\n        Extract docstring and formatted parameters from a cell content\n    \"\"\"\n    docstring_str = extract_docstring(cell_content)\n    if docstring_str:\n        return parse_docstring(docstring_str), f'\"\"\"\\n{docstring_str}\\n\"\"\"'\n    logging.warning(\"Docstring not found.\")\n    return Docstring(), ''",
              "col_offset": 5,
              "full_signature": "get_docstring_data(cell_content: str) -> Tuple[Docstring, str]",
              "line_number": 106,
              "name": "get_docstring_data",
              "parameters": [
                {
                  "col_offset": 24,
                  "line_number": 106,
                  "name": "cell_content",
                  "type": "str"
                }
              ],
              "return_type": "Tuple[Docstring, str]",
              "signature": "get_docstring_data(cell_content: str) -> Tuple[Docstring, str]"
            },
            {
              "annotations": "",
              "body": "def is_no_effect(content: str, resource: Dict[str, Any]) -> bool:\n    \"\"\"\n        Return true if the cell is a 'no effect cell'\n        'no effect cell' =  a 'code cell' with one of the configurable\n        'ignore_keys' as comment\n    \"\"\"\n    logging.debug('Look for no effect cells')\n    for keyword in resource.get('ignore_keys', [DEFAULT_IGNORE_KEY]):\n        if keyword in content:\n            return True\n    return False",
              "col_offset": 5,
              "full_signature": "is_no_effect(content: str, resource: Dict[str, Any]) -> bool",
              "line_number": 140,
              "name": "is_no_effect",
              "parameters": [
                {
                  "col_offset": 18,
                  "line_number": 140,
                  "name": "content",
                  "type": "str"
                },
                {
                  "col_offset": 32,
                  "line_number": 140,
                  "name": "resource",
                  "type": "Dict[str, Any]"
                }
              ],
              "return_type": "bool",
              "signature": "is_no_effect(content: str, resource: Dict[str, Any]) -> bool"
            },
            {
              "annotations": "",
              "body": "def is_trailing_cell(cell: Dict[str, Any], resource: Dict[str, Any]) -> str:\n    \"\"\"\n        Return true if the cell is a 'no effect cell' or not a 'code cell'\n    \"\"\"\n    logging.debug('Look for no trailing cells')\n    return cell['cell_type'] != 'code' or is_no_effect(cell['source'], resource)",
              "col_offset": 5,
              "full_signature": "is_trailing_cell(cell: Dict[str, Any], resource: Dict[str, Any]) -> str",
              "line_number": 153,
              "name": "is_trailing_cell",
              "parameters": [
                {
                  "col_offset": 22,
                  "line_number": 153,
                  "name": "cell",
                  "type": "Dict[str, Any]"
                },
                {
                  "col_offset": 44,
                  "line_number": 153,
                  "name": "resource",
                  "type": "Dict[str, Any]"
                }
              ],
              "return_type": "str",
              "signature": "is_trailing_cell(cell: Dict[str, Any], resource: Dict[str, Any]) -> str"
            }
          ],
          "name": "ipynb_to_python"
        },
        {
          "classes": [],
          "file_path": "mlvtools/helper.py",
          "functions": [
            {
              "annotations": "",
              "body": "def to_cmd_param(variable: str) -> str:\n    \"\"\"\n        Convert a variable in a command parameter format\n    \"\"\"\n    return variable.replace('_', '-')",
              "col_offset": 5,
              "full_signature": "to_cmd_param(variable: str) -> str",
              "line_number": 18,
              "name": "to_cmd_param",
              "parameters": [
                {
                  "col_offset": 18,
                  "line_number": 18,
                  "name": "variable",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "signature": "to_cmd_param(variable: str) -> str"
            },
            {
              "annotations": "",
              "body": "def to_bash_variable(param: str) -> str:\n    \"\"\"\n        Convert a command variable in a bash variable\n    \"\"\"\n    return param.upper().replace('-', '_')",
              "col_offset": 5,
              "full_signature": "to_bash_variable(param: str) -> str",
              "line_number": 25,
              "name": "to_bash_variable",
              "parameters": [
                {
                  "col_offset": 22,
                  "line_number": 25,
                  "name": "param",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "signature": "to_bash_variable(param: str) -> str"
            },
            {
              "annotations": "",
              "body": "def to_method_name(name: str) -> str:\n    \"\"\"\n        Convert a file name without extension to a python method name\n    \"\"\"\n    return '{}{}'.format(MLV_PREFIX, to_lower_alphanum(name))",
              "col_offset": 5,
              "full_signature": "to_method_name(name: str) -> str",
              "line_number": 32,
              "name": "to_method_name",
              "parameters": [
                {
                  "col_offset": 20,
                  "line_number": 32,
                  "name": "name",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "signature": "to_method_name(name: str) -> str"
            },
            {
              "annotations": "",
              "body": "def to_script_name(file_name: str) -> str:\n    \"\"\"\n        Return a python script name deduced from a notebook file name\n    \"\"\"\n    without_extension = splitext(file_name)[0]\n    return '{}{}.py'.format(MLV_PREFIX, to_lower_alphanum(without_extension))",
              "col_offset": 5,
              "full_signature": "to_script_name(file_name: str) -> str",
              "line_number": 39,
              "name": "to_script_name",
              "parameters": [
                {
                  "col_offset": 20,
                  "line_number": 39,
                  "name": "file_name",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "signature": "to_script_name(file_name: str) -> str"
            },
            {
              "annotations": "",
              "body": "def to_lower_alphanum(file_name_no_ext: str):\n    \"\"\"\n        Convert a file name without extension to a lower case alphanumeric filename\n    \"\"\"\n    return re.sub(r'\\W+', '_', file_name_no_ext).lower()",
              "col_offset": 5,
              "full_signature": "to_lower_alphanum(file_name_no_ext: str)",
              "line_number": 47,
              "name": "to_lower_alphanum",
              "parameters": [
                {
                  "col_offset": 23,
                  "line_number": 47,
                  "name": "file_name_no_ext",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "to_lower_alphanum(file_name_no_ext: str)"
            },
            {
              "annotations": "",
              "body": "def to_dvc_cmd_name(script_name: str) -> str:\n    \"\"\"\n        Return a dvc command name deduced from a python script name\n    \"\"\"\n    return '{}_dvc'.format(splitext(script_name)[0])",
              "col_offset": 5,
              "full_signature": "to_dvc_cmd_name(script_name: str) -> str",
              "line_number": 54,
              "name": "to_dvc_cmd_name",
              "parameters": [
                {
                  "col_offset": 21,
                  "line_number": 54,
                  "name": "script_name",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "signature": "to_dvc_cmd_name(script_name: str) -> str"
            },
            {
              "annotations": "",
              "body": "def to_dvc_meta_filename(python_script_path: str) -> str:\n    \"\"\"\n        Return a dvc meta file name deduced from a python script path\n    \"\"\"\n    without_extension = splitext(python_script_path)[0]\n    return f'{to_lower_alphanum(basename(without_extension))}.dvc'",
              "col_offset": 5,
              "full_signature": "to_dvc_meta_filename(python_script_path: str) -> str",
              "line_number": 61,
              "name": "to_dvc_meta_filename",
              "parameters": [
                {
                  "col_offset": 26,
                  "line_number": 61,
                  "name": "python_script_path",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "signature": "to_dvc_meta_filename(python_script_path: str) -> str"
            },
            {
              "annotations": "",
              "body": "def to_instructions_list(source: str) -> List[str]:\n    \"\"\"\n        Convert a string of several instruction into a list of instructions\n    \"\"\"\n    return source.strip('\\n').split('\\n')",
              "col_offset": 5,
              "full_signature": "to_instructions_list(source: str) -> List[str]",
              "line_number": 69,
              "name": "to_instructions_list",
              "parameters": [
                {
                  "col_offset": 26,
                  "line_number": 69,
                  "name": "source",
                  "type": "str"
                }
              ],
              "return_type": "List[str]",
              "signature": "to_instructions_list(source: str) -> List[str]"
            },
            {
              "annotations": "",
              "body": "def to_sanitized_path(path: str):\n    \"\"\" Ensure path starts with / \"\"\"\n    return path if path.startswith(('/', './')) else f'./{path}'",
              "col_offset": 5,
              "full_signature": "to_sanitized_path(path: str)",
              "line_number": 76,
              "name": "to_sanitized_path",
              "parameters": [
                {
                  "col_offset": 23,
                  "line_number": 76,
                  "name": "path",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "to_sanitized_path(path: str)"
            },
            {
              "annotations": "",
              "body": "def extract_type(type_name: str) -> TypeInfo:\n    \"\"\"\n        Extract type info (type name and is list) from docstring\n        type.\n        examples:\n            str => str, is_list=False\n            int => int, is_list=False\n            List[int] => int, is_list=True\n            list[str] => str, is_list=True\n\n    \"\"\"\n    if type_name:\n        is_list = False\n        type_name = type_name.strip()\n        match = re.match(r'^[L|l]ist(?:\\[(?P<type_name>\\w*)\\])?$', type_name)\n        if match:\n            is_list = True\n            type_name = 'str' if not match.group('type_name') else match.group('type_name')\n        return TypeInfo(type_name, is_list)\n    return TypeInfo(None, is_list=False)",
              "col_offset": 5,
              "full_signature": "extract_type(type_name: str) -> TypeInfo",
              "line_number": 84,
              "name": "extract_type",
              "parameters": [
                {
                  "col_offset": 18,
                  "line_number": 84,
                  "name": "type_name",
                  "type": "str"
                }
              ],
              "return_type": "TypeInfo",
              "signature": "extract_type(type_name: str) -> TypeInfo"
            },
            {
              "annotations": "",
              "body": "def render_string_template(string_template: str, **kwargs) -> str:\n    \"\"\"\n        Render a Jinja string template\n    \"\"\"\n    return Environment(undefined=StrictUndefined).from_string(string_template).render(**kwargs)",
              "col_offset": 5,
              "full_signature": "render_string_template(string_template: str) -> str",
              "line_number": 106,
              "name": "render_string_template",
              "parameters": [
                {
                  "col_offset": 28,
                  "line_number": 106,
                  "name": "string_template",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "signature": "render_string_template(string_template: str) -> str"
            },
            {
              "annotations": "",
              "body": "def write_template(output_path, template_path: str, **kwargs):\n    \"\"\"\n        Write an executable output file using Jinja template.\n    \"\"\"\n    logging.info(f'Write command {output_path} using template {basename(template_path)}')\n    try:\n        makedirs(dirname(output_path), exist_ok=True)\n        with open(template_path, 'r') as template_fd, open(output_path, 'w') as fd:\n            content = render_string_template(template_fd.read(), **kwargs)\n            fd.write(content)\n        chmod(output_path, 0o755)\n    except IOError as e:\n        raise MlVToolException(f'Cannot create executable {output_path} using template {template_path}') from e\n    except UndefinedError as e:\n        raise MlVToolException(f'Cannot render {output_path} using template {template_path} due to undefined '\n                               f'variable: {e}') from e\n    except TemplateError as e:\n        raise MlVToolException(f'Cannot render {output_path} using template {template_path}') from e",
              "col_offset": 5,
              "full_signature": "write_template(output_path, template_path: str)",
              "line_number": 113,
              "name": "write_template",
              "parameters": [
                {
                  "col_offset": 20,
                  "line_number": 113,
                  "name": "output_path",
                  "type": null
                },
                {
                  "col_offset": 33,
                  "line_number": 113,
                  "name": "template_path",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "write_template(output_path, template_path: str)"
            },
            {
              "annotations": "",
              "body": "def write_python_script(script_content: str, output_path: str):\n    \"\"\"\n        Write Python 3 generated code into an executable file\n        - use yapf for code format\n    \"\"\"\n    try:\n        makedirs(dirname(output_path), exist_ok=True)\n        formatted_script = FormatCode(script_content, style_config=f'{{ based_on_style: pep8, '\n                                                                   f'column_limit: {MAX_LINE_LENGTH} }}')\n        with open(output_path, 'w') as fd:\n            fd.write(formatted_script[0])\n        chmod(output_path, 0o755)\n    except SyntaxError as e:\n        raise MlVToolException(f'Cannot write generated Python, content is wrongly formatted: {script_content}') from e\n    except IOError as e:\n        raise MlVToolException(f'Cannot write generated Python script {output_path}') from e",
              "col_offset": 5,
              "full_signature": "write_python_script(script_content: str, output_path: str)",
              "line_number": 133,
              "name": "write_python_script",
              "parameters": [
                {
                  "col_offset": 25,
                  "line_number": 133,
                  "name": "script_content",
                  "type": "str"
                },
                {
                  "col_offset": 46,
                  "line_number": 133,
                  "name": "output_path",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "write_python_script(script_content: str, output_path: str)"
            }
          ],
          "name": "helper"
        },
        {
          "classes": [],
          "file_path": "mlvtools/check_script.py",
          "functions": [
            {
              "annotations": "",
              "body": "def compare(notebook_path: str, script_path: str, conf: MlVToolConf) -> bool:\n    \"\"\"\n        Compare the script obtained by notebook conversion using ipynb_to_python\n        with the actual script.\n    \"\"\"\n    generated_script = get_converted_script(notebook_path, conf)\n    generated_ast = get_ast(generated_script, name=notebook_path)\n\n    script_ast = get_ast_from_file(script_path)\n\n    return is_ast_equal(generated_ast, script_ast)",
              "col_offset": 5,
              "full_signature": "compare(notebook_path: str, script_path: str, conf: MlVToolConf) -> bool",
              "line_number": 15,
              "name": "compare",
              "parameters": [
                {
                  "col_offset": 13,
                  "line_number": 15,
                  "name": "notebook_path",
                  "type": "str"
                },
                {
                  "col_offset": 33,
                  "line_number": 15,
                  "name": "script_path",
                  "type": "str"
                },
                {
                  "col_offset": 51,
                  "line_number": 15,
                  "name": "conf",
                  "type": "MlVToolConf"
                }
              ],
              "return_type": "bool",
              "signature": "compare(notebook_path: str, script_path: str, conf: MlVToolConf) -> bool"
            },
            {
              "annotations": "",
              "body": "def run_consistency_check(notebook_path: str, script_path: str, conf: MlVToolConf) -> bool:\n    \"\"\"\n        Call comparison on notebook and script then display the result.\n    \"\"\"\n    logging.info(f'Run consistency check on ({notebook_path}, {script_path})')\n\n    if not exists(script_path):\n        logging.error(f'Script path {script_path} does not exists.')\n        return False\n\n    equals = compare(notebook_path, script_path, conf)\n    if equals:\n        logging.log(logging.WARNING + 1, f'Script content is the same for {basename(notebook_path)} '\n                                         f'and {basename(script_path)}')\n    else:\n        logging.error(f'Difference found between {notebook_path} and {script_path}.'\n                      f'Ensure notebook conversion is up to date (ipynb_to_python)')\n    return equals",
              "col_offset": 5,
              "full_signature": "run_consistency_check(notebook_path: str, script_path: str, conf: MlVToolConf) -> bool",
              "line_number": 28,
              "name": "run_consistency_check",
              "parameters": [
                {
                  "col_offset": 27,
                  "line_number": 28,
                  "name": "notebook_path",
                  "type": "str"
                },
                {
                  "col_offset": 47,
                  "line_number": 28,
                  "name": "script_path",
                  "type": "str"
                },
                {
                  "col_offset": 65,
                  "line_number": 28,
                  "name": "conf",
                  "type": "MlVToolConf"
                }
              ],
              "return_type": "bool",
              "signature": "run_consistency_check(notebook_path: str, script_path: str, conf: MlVToolConf) -> bool"
            }
          ],
          "name": "check_script"
        },
        {
          "classes": [],
          "file_path": "mlvtools/export_pipeline.py",
          "functions": [
            {
              "annotations": "",
              "body": "def get_dvc_files(dvc_target_file: str) -> List[str]:\n    \"\"\"\n        Return the list of potential DVC meta file pipeline step.\n        DVC meta files are all located in the same directory for a given pipeline.\n        DVC file extension: .dvc\n    \"\"\"\n    if not exists(dvc_target_file):\n        raise MlVToolException(f'Targeted pipeline metadata step {dvc_target_file} does not exist')\n    return glob.glob(join(dirname(dvc_target_file), '*.dvc'))",
              "col_offset": 5,
              "full_signature": "get_dvc_files(dvc_target_file: str) -> List[str]",
              "line_number": 23,
              "name": "get_dvc_files",
              "parameters": [
                {
                  "col_offset": 19,
                  "line_number": 23,
                  "name": "dvc_target_file",
                  "type": "str"
                }
              ],
              "return_type": "List[str]",
              "signature": "get_dvc_files(dvc_target_file: str) -> List[str]"
            },
            {
              "annotations": "",
              "body": "def export_pipeline(dvc_meta_file: str, output: str, work_dir: str):\n    \"\"\"\n     Generate an executable script to run a whole pipeline\n    \"\"\"\n    logging.info(f'Export pipeline from step {dvc_meta_file} to {output}')\n    logging.debug(f'Work directory {work_dir}')\n\n    ordered_dvc_metas = get_dvc_dependencies(dvc_meta_file, get_dvc_files(dvc_meta_file))\n\n    template_data = {'work_dir': work_dir, 'cmds': [dvc_meta.cmd for dvc_meta in ordered_dvc_metas]}\n    logging.debug(f'Template data: {template_data}')\n\n    templates_path = join(CURRENT_DIR, 'templates', PIPELINE_EXPORT_TEMPLATE_NAME)\n    write_template(output, templates_path, info=template_data)\n    logging.log(logging.WARNING + 1, f'Pipeline successfully exported in {abspath(output)}')",
              "col_offset": 5,
              "full_signature": "export_pipeline(dvc_meta_file: str, output: str, work_dir: str)",
              "line_number": 34,
              "name": "export_pipeline",
              "parameters": [
                {
                  "col_offset": 21,
                  "line_number": 34,
                  "name": "dvc_meta_file",
                  "type": "str"
                },
                {
                  "col_offset": 41,
                  "line_number": 34,
                  "name": "output",
                  "type": "str"
                },
                {
                  "col_offset": 54,
                  "line_number": 34,
                  "name": "work_dir",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "export_pipeline(dvc_meta_file: str, output: str, work_dir: str)"
            }
          ],
          "name": "export_pipeline"
        },
        {
          "classes": [],
          "file_path": "mlvtools/diff/parse.py",
          "functions": [
            {
              "annotations": "",
              "body": "def get_ast(content: str, name: str = 'undefined'):\n    \"\"\"\n        Return ast tree of the given python content\n    \"\"\"\n    try:\n        return ast.parse(content, filename=name)\n    except SyntaxError as e:\n        raise MlVToolException(f'Invalid python format for file {name}: {e}') from e\n    except Exception as e:\n        raise MlVToolException(f'Cannot extract ast tree{f\" {name}\" if name else \"\"}: {e}') from e",
              "col_offset": 5,
              "full_signature": "get_ast(content: str, name: str)",
              "line_number": 6,
              "name": "get_ast",
              "parameters": [
                {
                  "col_offset": 13,
                  "line_number": 6,
                  "name": "content",
                  "type": "str"
                },
                {
                  "col_offset": 27,
                  "line_number": 6,
                  "name": "name",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "get_ast(content: str, name: str)"
            },
            {
              "annotations": "",
              "body": "def get_ast_from_file(file_path: str):\n    \"\"\"\n        Read provided file then return the corresponding ast tree\n    \"\"\"\n    try:\n        with open(file_path, 'r') as fd:\n            return get_ast(fd.read(), file_path)\n    except IOError as e:\n        raise MlVToolException(f'Cannot read file {file_path} for ast tree extraction') from e",
              "col_offset": 5,
              "full_signature": "get_ast_from_file(file_path: str)",
              "line_number": 18,
              "name": "get_ast_from_file",
              "parameters": [
                {
                  "col_offset": 23,
                  "line_number": 18,
                  "name": "file_path",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "get_ast_from_file(file_path: str)"
            }
          ],
          "name": "parse"
        },
        {
          "classes": [],
          "file_path": "mlvtools/mlv_dvc/dvc_parser.py",
          "functions": [
            {
              "annotations": "",
              "body": "def get_dvc_meta(dvc_meta_file: str) -> DvcMeta:\n    \"\"\"\n        Get DVC meta from a DVC meta file\n    \"\"\"\n    logging.debug(f'Get DVC meta from {dvc_meta_file}')\n    try:\n        with open(dvc_meta_file, 'r') as fd:\n            raw_data = yaml.safe_load(fd.read())\n            deps = [v['path'] for v in raw_data.get('deps', [])]\n            outs = [v['path'] for v in raw_data.get('outs', [])]\n            meta = DvcMeta(basename(dvc_meta_file), raw_data.get('cmd', ''), deps, outs)\n            logging.debug(f'Meta for {dvc_meta_file}: {meta}')\n            return meta\n    except (yaml.error.YAMLError, AttributeError) as e:\n        raise MlVToolException(f'Cannot load DVC meta file {dvc_meta_file}. Wrong format') from e\n    except IOError as e:\n        raise MlVToolException(f'Cannot load DVC meta file {dvc_meta_file}') from e",
              "col_offset": 5,
              "full_signature": "get_dvc_meta(dvc_meta_file: str) -> DvcMeta",
              "line_number": 14,
              "name": "get_dvc_meta",
              "parameters": [
                {
                  "col_offset": 18,
                  "line_number": 14,
                  "name": "dvc_meta_file",
                  "type": "str"
                }
              ],
              "return_type": "DvcMeta",
              "signature": "get_dvc_meta(dvc_meta_file: str) -> DvcMeta"
            },
            {
              "annotations": "",
              "body": "def get_dvc_dependencies(target_file_path: str, dvc_files: List[str]) -> List[DvcMeta]:\n    \"\"\"\n        Get ordered DVC meta needed to complete a DVC target step\n    \"\"\"\n    logging.info(f'Get DVC dependencies for {target_file_path}')\n    logging.debug(f'DVC files list {dvc_files}')\n    dvc_metas = get_meta_info(dvc_files)\n    target_step = get_dvc_meta(target_file_path)\n    dag = networkx.DiGraph()\n    for step in dvc_metas.values():\n        dag.add_node(step.name, step=step)\n        for dep in step.deps:\n            if dep not in dvc_metas:\n                continue\n            dag.add_node(dvc_metas[dep].name, step=dvc_metas[dep])\n            dag.add_edge(step.name, dvc_metas[dep].name, name=dep)\n    all_nodes = dict(dag.nodes(data='step'))\n    ordered_dependencies = [all_nodes[name] for name in networkx.dfs_postorder_nodes(dag, target_step.name)]\n    logging.debug(f'Ordered dependencies: {ordered_dependencies}')\n    return ordered_dependencies",
              "col_offset": 5,
              "full_signature": "get_dvc_dependencies(target_file_path: str, dvc_files: List[str]) -> List[DvcMeta]",
              "line_number": 47,
              "name": "get_dvc_dependencies",
              "parameters": [
                {
                  "col_offset": 26,
                  "line_number": 47,
                  "name": "target_file_path",
                  "type": "str"
                },
                {
                  "col_offset": 49,
                  "line_number": 47,
                  "name": "dvc_files",
                  "type": "List[str]"
                }
              ],
              "return_type": "List[DvcMeta]",
              "signature": "get_dvc_dependencies(target_file_path: str, dvc_files: List[str]) -> List[DvcMeta]"
            }
          ],
          "name": "dvc_parser"
        },
        {
          "classes": [
            {
              "fields": [],
              "methods": [
                {
                  "annotations": "",
                  "body": "def __init__(self, file_path: str, related_param: str = None):\n        self.related_param = related_param\n        self.file_path = file_path",
                  "col_offset": 9,
                  "full_signature": "DocstringDvc.__init__(self, file_path: str, related_param: str)",
                  "is_constructor": true,
                  "line_number": 18,
                  "name": "__init__",
                  "parameters": [
                    {
                      "col_offset": 18,
                      "line_number": 18,
                      "name": "self",
                      "type": null
                    },
                    {
                      "col_offset": 24,
                      "line_number": 18,
                      "name": "file_path",
                      "type": "str"
                    },
                    {
                      "col_offset": 40,
                      "line_number": 18,
                      "name": "related_param",
                      "type": "str"
                    }
                  ],
                  "return_type": null,
                  "signature": "DocstringDvc.__init__(self, file_path: str, related_param: str)"
                },
                {
                  "annotations": "",
                  "body": "def meta_checks(params: Dict[str, Optional[str]], args: List[str], description: str, expected_key: str):\n        if len(args) == 0:\n            raise MlVToolException('Cannot parse empty DocstringDVC')\n        if len(args) > 2:\n            raise MlVToolException(f'Invalid syntax: {args}. Expected :dvc-[in|out] [related_param]?: {{file_path}}')\n        if args[0] != expected_key:\n            raise MlVToolException('Receive bad parameter {}'.format(args[0]))\n\n        if not description:\n            raise MlVToolException(f'Not path given for {args}')\n\n        related_param = args[1] if len(args) == 2 else None\n\n        if related_param and related_param not in params:\n            raise MlVToolException(f'Cannot find related parameter for {related_param} in {args}')\n\n        if related_param and params[related_param] not in (None, 'str'):\n            raise MlVToolException(f'Unsupported type {params[related_param]} for {args}. Discard.')",
                  "col_offset": 9,
                  "full_signature": "DocstringDvc.meta_checks(params: Dict[str, Optional[str]], args: List[str], description: str, expected_key: str)",
                  "is_constructor": false,
                  "line_number": 27,
                  "name": "meta_checks",
                  "parameters": [
                    {
                      "col_offset": 21,
                      "line_number": 27,
                      "name": "params",
                      "type": "Dict[str, Optional[str]]"
                    },
                    {
                      "col_offset": 55,
                      "line_number": 27,
                      "name": "args",
                      "type": "List[str]"
                    },
                    {
                      "col_offset": 72,
                      "line_number": 27,
                      "name": "description",
                      "type": "str"
                    },
                    {
                      "col_offset": 90,
                      "line_number": 27,
                      "name": "expected_key",
                      "type": "str"
                    }
                  ],
                  "return_type": null,
                  "signature": "DocstringDvc.meta_checks(params: Dict[str, Optional[str]], args: List[str], description: str, expected_key: str)"
                }
              ],
              "name": "DocstringDvc",
              "superclasses": []
            },
            {
              "fields": [
                "DVC_IN_KEY"
              ],
              "methods": [
                {
                  "annotations": "",
                  "body": "def __init__(self, path: str, related_param: str = None):\n        super().__init__(path, related_param)",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcIn.__init__(self, path: str, related_param: str)",
                  "is_constructor": true,
                  "line_number": 56,
                  "name": "__init__",
                  "parameters": [
                    {
                      "col_offset": 18,
                      "line_number": 56,
                      "name": "self",
                      "type": null
                    },
                    {
                      "col_offset": 24,
                      "line_number": 56,
                      "name": "path",
                      "type": "str"
                    },
                    {
                      "col_offset": 35,
                      "line_number": 56,
                      "name": "related_param",
                      "type": "str"
                    }
                  ],
                  "return_type": null,
                  "signature": "DocstringDvcIn.__init__(self, path: str, related_param: str)"
                },
                {
                  "annotations": "",
                  "body": "def from_meta(params: Dict[str, Optional[str]], args: List[str], description: str) -> 'DocstringDvcIn':\n        DocstringDvc.meta_checks(params, args, description, DocstringDvcIn.DVC_IN_KEY)\n        return DocstringDvcIn(description, args[1] if len(args) == 2 else None)",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcIn.from_meta(params: Dict[str, Optional[str]], args: List[str], description: str) -> 'DocstringDvcIn'",
                  "is_constructor": false,
                  "line_number": 60,
                  "name": "from_meta",
                  "parameters": [
                    {
                      "col_offset": 19,
                      "line_number": 60,
                      "name": "params",
                      "type": "Dict[str, Optional[str]]"
                    },
                    {
                      "col_offset": 53,
                      "line_number": 60,
                      "name": "args",
                      "type": "List[str]"
                    },
                    {
                      "col_offset": 70,
                      "line_number": 60,
                      "name": "description",
                      "type": "str"
                    }
                  ],
                  "return_type": "'DocstringDvcIn'",
                  "signature": "DocstringDvcIn.from_meta(params: Dict[str, Optional[str]], args: List[str], description: str) -> 'DocstringDvcIn'"
                }
              ],
              "name": "DocstringDvcIn",
              "superclasses": [
                "DocstringDvc"
              ]
            },
            {
              "fields": [
                "DVC_OUT_KEY"
              ],
              "methods": [
                {
                  "annotations": "",
                  "body": "def __init__(self, path: str, related_param: str = None):\n        super().__init__(path, related_param)",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcOut.__init__(self, path: str, related_param: str)",
                  "is_constructor": true,
                  "line_number": 73,
                  "name": "__init__",
                  "parameters": [
                    {
                      "col_offset": 18,
                      "line_number": 73,
                      "name": "self",
                      "type": null
                    },
                    {
                      "col_offset": 24,
                      "line_number": 73,
                      "name": "path",
                      "type": "str"
                    },
                    {
                      "col_offset": 35,
                      "line_number": 73,
                      "name": "related_param",
                      "type": "str"
                    }
                  ],
                  "return_type": null,
                  "signature": "DocstringDvcOut.__init__(self, path: str, related_param: str)"
                },
                {
                  "annotations": "",
                  "body": "def from_meta(params: Dict[str, Optional[str]], args: List[str], description: str) -> 'DocstringDvcOut':\n        DocstringDvc.meta_checks(params, args, description, DocstringDvcOut.DVC_OUT_KEY)\n        return DocstringDvcOut(description, args[1] if len(args) == 2 else None)",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcOut.from_meta(params: Dict[str, Optional[str]], args: List[str], description: str) -> 'DocstringDvcOut'",
                  "is_constructor": false,
                  "line_number": 77,
                  "name": "from_meta",
                  "parameters": [
                    {
                      "col_offset": 19,
                      "line_number": 77,
                      "name": "params",
                      "type": "Dict[str, Optional[str]]"
                    },
                    {
                      "col_offset": 53,
                      "line_number": 77,
                      "name": "args",
                      "type": "List[str]"
                    },
                    {
                      "col_offset": 70,
                      "line_number": 77,
                      "name": "description",
                      "type": "str"
                    }
                  ],
                  "return_type": "'DocstringDvcOut'",
                  "signature": "DocstringDvcOut.from_meta(params: Dict[str, Optional[str]], args: List[str], description: str) -> 'DocstringDvcOut'"
                }
              ],
              "name": "DocstringDvcOut",
              "superclasses": [
                "DocstringDvc"
              ]
            },
            {
              "fields": [
                "DVC_OUT_PERSIST_KEY"
              ],
              "methods": [
                {
                  "annotations": "",
                  "body": "def __init__(self, path: str, related_param: str = None):\n        super().__init__(path, related_param)",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcOutPersist.__init__(self, path: str, related_param: str)",
                  "is_constructor": true,
                  "line_number": 90,
                  "name": "__init__",
                  "parameters": [
                    {
                      "col_offset": 18,
                      "line_number": 90,
                      "name": "self",
                      "type": null
                    },
                    {
                      "col_offset": 24,
                      "line_number": 90,
                      "name": "path",
                      "type": "str"
                    },
                    {
                      "col_offset": 35,
                      "line_number": 90,
                      "name": "related_param",
                      "type": "str"
                    }
                  ],
                  "return_type": null,
                  "signature": "DocstringDvcOutPersist.__init__(self, path: str, related_param: str)"
                },
                {
                  "annotations": "",
                  "body": "def from_meta(params: Dict[str, Optional[str]], args: List[str], description: str) -> 'DocstringDvcOutPersist':\n        DocstringDvc.meta_checks(params, args, description, DocstringDvcOutPersist.DVC_OUT_PERSIST_KEY)\n        return DocstringDvcOutPersist(description, args[1] if len(args) == 2 else None)",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcOutPersist.from_meta(params: Dict[str, Optional[str]], args: List[str], description: str) -> 'DocstringDvcOutPersist'",
                  "is_constructor": false,
                  "line_number": 94,
                  "name": "from_meta",
                  "parameters": [
                    {
                      "col_offset": 19,
                      "line_number": 94,
                      "name": "params",
                      "type": "Dict[str, Optional[str]]"
                    },
                    {
                      "col_offset": 53,
                      "line_number": 94,
                      "name": "args",
                      "type": "List[str]"
                    },
                    {
                      "col_offset": 70,
                      "line_number": 94,
                      "name": "description",
                      "type": "str"
                    }
                  ],
                  "return_type": "'DocstringDvcOutPersist'",
                  "signature": "DocstringDvcOutPersist.from_meta(params: Dict[str, Optional[str]], args: List[str], description: str) -> 'DocstringDvcOutPersist'"
                }
              ],
              "name": "DocstringDvcOutPersist",
              "superclasses": [
                "DocstringDvc"
              ]
            },
            {
              "fields": [
                "DVC_EXTRA_KEY"
              ],
              "methods": [
                {
                  "annotations": "",
                  "body": "def __init__(self, extra: str):\n        self.extra = extra",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcExtra.__init__(self, extra: str)",
                  "is_constructor": true,
                  "line_number": 108,
                  "name": "__init__",
                  "parameters": [
                    {
                      "col_offset": 18,
                      "line_number": 108,
                      "name": "self",
                      "type": null
                    },
                    {
                      "col_offset": 24,
                      "line_number": 108,
                      "name": "extra",
                      "type": "str"
                    }
                  ],
                  "return_type": null,
                  "signature": "DocstringDvcExtra.__init__(self, extra: str)"
                },
                {
                  "annotations": "",
                  "body": "def from_meta(args: List[str], description: str) -> 'DocstringDvcExtra':\n        if len(args) != 1 or not description:\n            raise MlVToolException(f'Docstring dvc-extra invalid syntax: {args}:{description}.'\n                                   f'Expected :dvc-extra: {{python_other_param}}')\n        if args[0] != DocstringDvcExtra.DVC_EXTRA_KEY:\n            raise MlVToolException(f'Receive bad parameter for {DocstringDvcExtra.DVC_EXTRA_KEY} {args[0]}')\n        return DocstringDvcExtra(description)",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcExtra.from_meta(args: List[str], description: str) -> 'DocstringDvcExtra'",
                  "is_constructor": false,
                  "line_number": 112,
                  "name": "from_meta",
                  "parameters": [
                    {
                      "col_offset": 19,
                      "line_number": 112,
                      "name": "args",
                      "type": "List[str]"
                    },
                    {
                      "col_offset": 36,
                      "line_number": 112,
                      "name": "description",
                      "type": "str"
                    }
                  ],
                  "return_type": "'DocstringDvcExtra'",
                  "signature": "DocstringDvcExtra.from_meta(args: List[str], description: str) -> 'DocstringDvcExtra'"
                }
              ],
              "name": "DocstringDvcExtra",
              "superclasses": []
            },
            {
              "fields": [
                "DVC_META_FILE_KEY"
              ],
              "methods": [
                {
                  "annotations": "",
                  "body": "def __init__(self, file_name: str):\n        self.file_name = file_name",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcMetaFile.__init__(self, file_name: str)",
                  "is_constructor": true,
                  "line_number": 130,
                  "name": "__init__",
                  "parameters": [
                    {
                      "col_offset": 18,
                      "line_number": 130,
                      "name": "self",
                      "type": null
                    },
                    {
                      "col_offset": 24,
                      "line_number": 130,
                      "name": "file_name",
                      "type": "str"
                    }
                  ],
                  "return_type": null,
                  "signature": "DocstringDvcMetaFile.__init__(self, file_name: str)"
                },
                {
                  "annotations": "",
                  "body": "def from_meta(args: List[str], description: str) -> 'DocstringDvcMetaFile':\n        if len(args) != 1 or not description:\n            raise MlVToolException(f'Docstring dvc-meta-file invalid syntax: {args}:{description}.'\n                                   f'Expected :dvc-meta-file: {{meta_file_name}}')\n        if args[0] != DocstringDvcMetaFile.DVC_META_FILE_KEY:\n            raise MlVToolException(f'Receive bad parameter for {DocstringDvcMetaFile.DVC_META_FILE_KEY} {args[0]}')\n        description = description if description.endswith('.dvc') else f'{description}.dvc'\n        return DocstringDvcMetaFile(description)",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcMetaFile.from_meta(args: List[str], description: str) -> 'DocstringDvcMetaFile'",
                  "is_constructor": false,
                  "line_number": 134,
                  "name": "from_meta",
                  "parameters": [
                    {
                      "col_offset": 19,
                      "line_number": 134,
                      "name": "args",
                      "type": "List[str]"
                    },
                    {
                      "col_offset": 36,
                      "line_number": 134,
                      "name": "description",
                      "type": "str"
                    }
                  ],
                  "return_type": "'DocstringDvcMetaFile'",
                  "signature": "DocstringDvcMetaFile.from_meta(args: List[str], description: str) -> 'DocstringDvcMetaFile'"
                }
              ],
              "name": "DocstringDvcMetaFile",
              "superclasses": []
            },
            {
              "fields": [
                "DVC_CMD_KEY"
              ],
              "methods": [
                {
                  "annotations": "",
                  "body": "def __init__(self, cmd: str):\n        self.cmd = cmd",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcCommand.__init__(self, cmd: str)",
                  "is_constructor": true,
                  "line_number": 154,
                  "name": "__init__",
                  "parameters": [
                    {
                      "col_offset": 18,
                      "line_number": 154,
                      "name": "self",
                      "type": null
                    },
                    {
                      "col_offset": 24,
                      "line_number": 154,
                      "name": "cmd",
                      "type": "str"
                    }
                  ],
                  "return_type": null,
                  "signature": "DocstringDvcCommand.__init__(self, cmd: str)"
                },
                {
                  "annotations": "",
                  "body": "def from_meta(args: List[str], description: str) -> 'DocstringDvcCommand':\n        if len(args) != 1 or not description:\n            raise MlVToolException(f'Docstring dvc-cmd invalid syntax: {args}:{description}.'\n                                   f'Expected :dvc-cmd: {{dvc_command}}')\n        if args[0] != DocstringDvcCommand.DVC_CMD_KEY:\n            raise MlVToolException(f'Receive bad parameter for {DocstringDvcCommand.DVC_CMD_KEY} {args[0]}')\n        return DocstringDvcCommand(description)",
                  "col_offset": 9,
                  "full_signature": "DocstringDvcCommand.from_meta(args: List[str], description: str) -> 'DocstringDvcCommand'",
                  "is_constructor": false,
                  "line_number": 158,
                  "name": "from_meta",
                  "parameters": [
                    {
                      "col_offset": 19,
                      "line_number": 158,
                      "name": "args",
                      "type": "List[str]"
                    },
                    {
                      "col_offset": 36,
                      "line_number": 158,
                      "name": "description",
                      "type": "str"
                    }
                  ],
                  "return_type": "'DocstringDvcCommand'",
                  "signature": "DocstringDvcCommand.from_meta(args: List[str], description: str) -> 'DocstringDvcCommand'"
                }
              ],
              "name": "DocstringDvcCommand",
              "superclasses": []
            }
          ],
          "file_path": "mlvtools/docstring_helpers/parse.py",
          "functions": [
            {
              "annotations": "",
              "body": "def parse_docstring(docstring_str: str) -> Docstring:\n    try:\n        docstring = dc_parse(docstring_str, style=Style.rest)\n    except ParseError as e:\n        raise MlVToolException(f'Docstring format error. {e}') from e\n    return docstring",
              "col_offset": 5,
              "full_signature": "parse_docstring(docstring_str: str) -> Docstring",
              "line_number": 208,
              "name": "parse_docstring",
              "parameters": [
                {
                  "col_offset": 21,
                  "line_number": 208,
                  "name": "docstring_str",
                  "type": "str"
                }
              ],
              "return_type": "Docstring",
              "signature": "parse_docstring(docstring_str: str) -> Docstring"
            },
            {
              "annotations": "",
              "body": "def resolve_docstring(docstring: str, docstring_conf: dict) -> str:\n    \"\"\"\n        Use jinja to resolve docstring template using user custom configuration\n    \"\"\"\n    try:\n        return render_string_template(docstring, conf=docstring_conf)\n    except jinja2.exceptions.TemplateError as e:\n        raise MlVToolException(f'Cannot resolve docstring using Jinja, {e}') from e",
              "col_offset": 5,
              "full_signature": "resolve_docstring(docstring: str, docstring_conf: dict) -> str",
              "line_number": 216,
              "name": "resolve_docstring",
              "parameters": [
                {
                  "col_offset": 23,
                  "line_number": 216,
                  "name": "docstring",
                  "type": "str"
                },
                {
                  "col_offset": 39,
                  "line_number": 216,
                  "name": "docstring_conf",
                  "type": "dict"
                }
              ],
              "return_type": "str",
              "signature": "resolve_docstring(docstring: str, docstring_conf: dict) -> str"
            }
          ],
          "name": "parse"
        },
        {
          "classes": [],
          "file_path": "mlvtools/docstring_helpers/extract.py",
          "functions": [
            {
              "annotations": "",
              "body": "def extract_docstring(cell_content: str) -> str:\n    \"\"\" Extract a docstring from a cell content \"\"\"\n    logging.info('Extract docstring from cell content')\n    logging.debug(f'Cell content {cell_content}')\n    docstring = ''\n    try:\n        root = get_ast(cell_content)\n    except SyntaxError as e:\n        raise MlVToolException(f'Invalid python cell format: {cell_content}') from e\n    for node in ast.walk(root):\n        if isinstance(node, ast.Module):\n            docstring = ast.get_docstring(node)\n            break\n    return docstring",
              "col_offset": 5,
              "full_signature": "extract_docstring(cell_content: str) -> str",
              "line_number": 12,
              "name": "extract_docstring",
              "parameters": [
                {
                  "col_offset": 23,
                  "line_number": 12,
                  "name": "cell_content",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "signature": "extract_docstring(cell_content: str) -> str"
            },
            {
              "annotations": "",
              "body": "def extract_docstring_from_file(input_path: str, docstring_conf: dict = None) -> DocstringInfo:\n    \"\"\"\n        Extract method docstring information (docstring, method_name, input_path)\n        The provided python script must have one and only one method\n        The extracted docstring is parsed and returned in docstring info\n    \"\"\"\n    logging.info(f'Extract docstring from \"{input_path}\".')\n    try:\n        with open(input_path, 'r') as fd:\n            root = ast.parse(fd.read())\n    except FileNotFoundError as e:\n        raise MlVToolException(\n            f'Python input script {input_path} not found.') from e\n    except SyntaxError as e:\n        raise MlVToolException(f'Invalid python script format: {input_path}') from e\n\n    for node in ast.walk(root):\n        if isinstance(node, ast.FunctionDef):\n            method_name = node.name\n            docstring_str = ast.get_docstring(node)\n            if docstring_conf:\n                docstring_str = resolve_docstring(docstring_str, docstring_conf)\n            docstring = dc_parse(docstring_str)\n            break\n    else:\n        logging.error(f'Not method found in {input_path}')\n        raise MlVToolException(f'Not method found in {input_path}')\n\n    logging.debug(f'Docstring extracted from method {method_name}: {docstring_str}')\n    docstring_info = DocstringInfo(method_name=method_name,\n                                   docstring=docstring,\n                                   repr=docstring_str,\n                                   file_path=input_path)\n    return docstring_info",
              "col_offset": 5,
              "full_signature": "extract_docstring_from_file(input_path: str, docstring_conf: dict) -> DocstringInfo",
              "line_number": 32,
              "name": "extract_docstring_from_file",
              "parameters": [
                {
                  "col_offset": 33,
                  "line_number": 32,
                  "name": "input_path",
                  "type": "str"
                },
                {
                  "col_offset": 50,
                  "line_number": 32,
                  "name": "docstring_conf",
                  "type": "dict"
                }
              ],
              "return_type": "DocstringInfo",
              "signature": "extract_docstring_from_file(input_path: str, docstring_conf: dict) -> DocstringInfo"
            }
          ],
          "name": "extract"
        },
        {
          "classes": [
            {
              "fields": [],
              "methods": [
                {
                  "annotations": "",
                  "body": "def get_top_directory_raw_data(top_dir: str) -> dict:\n        return {'top_directory': top_dir}",
                  "col_offset": 9,
                  "full_signature": "MlVToolConf.get_top_directory_raw_data(top_dir: str) -> dict",
                  "is_constructor": false,
                  "line_number": 66,
                  "name": "get_top_directory_raw_data",
                  "parameters": [
                    {
                      "col_offset": 36,
                      "line_number": 66,
                      "name": "top_dir",
                      "type": "str"
                    }
                  ],
                  "return_type": "dict",
                  "signature": "MlVToolConf.get_top_directory_raw_data(top_dir: str) -> dict"
                },
                {
                  "annotations": "",
                  "body": "def load_from_file(file_path: str, working_directory) -> 'MlVToolConf':\n        try:\n            with open(file_path, 'r') as fd:\n                conf_raw_data = json.load(fd)\n            conf_raw_data.update(MlVToolConf.get_top_directory_raw_data(working_directory))\n            return MlVToolConf.parse_obj(conf_raw_data)\n        except JSONDecodeError as e:\n            raise MlVToolConfException(f'Cannot load conf from file {file_path}. Wrong format') from e\n        except ValidationError as e:\n            raise MlVToolConfException(f'Cannot load conf from file {file_path}. Validation error') from e\n        except IOError as e:\n            raise MlVToolConfException(f'Cannot load conf from file {file_path}') from e",
                  "col_offset": 9,
                  "full_signature": "MlVToolConf.load_from_file(file_path: str, working_directory) -> 'MlVToolConf'",
                  "is_constructor": false,
                  "line_number": 70,
                  "name": "load_from_file",
                  "parameters": [
                    {
                      "col_offset": 24,
                      "line_number": 70,
                      "name": "file_path",
                      "type": "str"
                    },
                    {
                      "col_offset": 40,
                      "line_number": 70,
                      "name": "working_directory",
                      "type": null
                    }
                  ],
                  "return_type": "'MlVToolConf'",
                  "signature": "MlVToolConf.load_from_file(file_path: str, working_directory) -> 'MlVToolConf'"
                }
              ],
              "name": "MlVToolConf",
              "superclasses": [
                "BaseModel"
              ]
            }
          ],
          "file_path": "mlvtools/conf/conf.py",
          "functions": [
            {
              "annotations": "",
              "body": "def load_conf_or_default(conf_path: str, working_directory) -> MlVToolConf:\n    \"\"\" Load the configuration file if present \"\"\"\n    if exists(conf_path):\n        logging.info(f'Load configuration from {conf_path}')\n        return MlVToolConf.load_from_file(conf_path, working_directory)\n    logging.info('No configuration found. Use default.')\n    return MlVToolConf(top_directory=working_directory)",
              "col_offset": 5,
              "full_signature": "load_conf_or_default(conf_path: str, working_directory) -> MlVToolConf",
              "line_number": 84,
              "name": "load_conf_or_default",
              "parameters": [
                {
                  "col_offset": 26,
                  "line_number": 84,
                  "name": "conf_path",
                  "type": "str"
                },
                {
                  "col_offset": 42,
                  "line_number": 84,
                  "name": "working_directory",
                  "type": null
                }
              ],
              "return_type": "MlVToolConf",
              "signature": "load_conf_or_default(conf_path: str, working_directory) -> MlVToolConf"
            },
            {
              "annotations": "",
              "body": "def get_script_output_path(notebook_path: str, conf: MlVToolConf) -> str:\n    \"\"\" Generate python script path according to conf and notebook file name \"\"\"\n    file_name = to_script_name(basename(notebook_path))\n    return join(conf.top_directory, conf.path.python_script_root_dir, file_name)",
              "col_offset": 5,
              "full_signature": "get_script_output_path(notebook_path: str, conf: MlVToolConf) -> str",
              "line_number": 93,
              "name": "get_script_output_path",
              "parameters": [
                {
                  "col_offset": 28,
                  "line_number": 93,
                  "name": "notebook_path",
                  "type": "str"
                },
                {
                  "col_offset": 48,
                  "line_number": 93,
                  "name": "conf",
                  "type": "MlVToolConf"
                }
              ],
              "return_type": "str",
              "signature": "get_script_output_path(notebook_path: str, conf: MlVToolConf) -> str"
            },
            {
              "annotations": "",
              "body": "def get_dvc_cmd_output_path(script_path: str, conf: MlVToolConf) -> str:\n    \"\"\" Generate dvc command path according to conf and python script file name \"\"\"\n    file_name = to_dvc_cmd_name(basename(script_path))\n    return join(conf.top_directory, conf.path.dvc_cmd_root_dir, file_name)",
              "col_offset": 5,
              "full_signature": "get_dvc_cmd_output_path(script_path: str, conf: MlVToolConf) -> str",
              "line_number": 99,
              "name": "get_dvc_cmd_output_path",
              "parameters": [
                {
                  "col_offset": 29,
                  "line_number": 99,
                  "name": "script_path",
                  "type": "str"
                },
                {
                  "col_offset": 47,
                  "line_number": 99,
                  "name": "conf",
                  "type": "MlVToolConf"
                }
              ],
              "return_type": "str",
              "signature": "get_dvc_cmd_output_path(script_path: str, conf: MlVToolConf) -> str"
            },
            {
              "annotations": "",
              "body": "def get_dvc_metadata_output_path(script_path: str, conf: MlVToolConf) -> str:\n    \"\"\" Generate dvc metadata path according to conf and python script file name \"\"\"\n    file_name = to_dvc_meta_filename(basename(script_path))\n    return join(conf.top_directory, conf.path.dvc_metadata_root_dir, file_name)",
              "col_offset": 5,
              "full_signature": "get_dvc_metadata_output_path(script_path: str, conf: MlVToolConf) -> str",
              "line_number": 105,
              "name": "get_dvc_metadata_output_path",
              "parameters": [
                {
                  "col_offset": 34,
                  "line_number": 105,
                  "name": "script_path",
                  "type": "str"
                },
                {
                  "col_offset": 52,
                  "line_number": 105,
                  "name": "conf",
                  "type": "MlVToolConf"
                }
              ],
              "return_type": "str",
              "signature": "get_dvc_metadata_output_path(script_path: str, conf: MlVToolConf) -> str"
            },
            {
              "annotations": "",
              "body": "def get_conf_file_default_path(work_dir: str) -> str:\n    return join(work_dir, DEFAULT_CONF_FILENAME)",
              "col_offset": 5,
              "full_signature": "get_conf_file_default_path(work_dir: str) -> str",
              "line_number": 111,
              "name": "get_conf_file_default_path",
              "parameters": [
                {
                  "col_offset": 32,
                  "line_number": 111,
                  "name": "work_dir",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "signature": "get_conf_file_default_path(work_dir: str) -> str"
            },
            {
              "annotations": "",
              "body": "def load_docstring_conf(docstring_conf_path: str) -> dict:\n    \"\"\" Load a Yaml format docstring configuration \"\"\"\n    try:\n        logging.info(f'Load docstring configuration from {docstring_conf_path}')\n        with open(docstring_conf_path, 'r') as fd:\n            return yaml.safe_load(fd)\n    except yaml.YAMLError as e:\n        raise MlVToolConfException(f'Cannot load docstring conf {docstring_conf_path}. Format error {e}.') from e\n    except IOError as e:\n        raise MlVToolConfException(f'Cannot load file {docstring_conf_path}. IOError {e}') from e",
              "col_offset": 5,
              "full_signature": "load_docstring_conf(docstring_conf_path: str) -> dict",
              "line_number": 115,
              "name": "load_docstring_conf",
              "parameters": [
                {
                  "col_offset": 25,
                  "line_number": 115,
                  "name": "docstring_conf_path",
                  "type": "str"
                }
              ],
              "return_type": "dict",
              "signature": "load_docstring_conf(docstring_conf_path: str) -> dict"
            }
          ],
          "name": "conf"
        },
        {
          "classes": [],
          "file_path": "tests/unit/test_helpers.py",
          "functions": [
            {
              "annotations": "",
              "body": "def check_write_template_error_case(template_path: str, data: dict, exp_error: Exception):\n    with TemporaryDirectory() as tmp_dir:\n        output_path = join(tmp_dir, 'my_exe.sh')\n        with pytest.raises(MlVToolException) as e:\n            write_template(output_path, template_path, **data)\n    assert isinstance(e.value.__cause__, exp_error)",
              "col_offset": 5,
              "full_signature": "check_write_template_error_case(template_path: str, data: dict, exp_error: Exception)",
              "line_number": 164,
              "name": "check_write_template_error_case",
              "parameters": [
                {
                  "col_offset": 37,
                  "line_number": 164,
                  "name": "template_path",
                  "type": "str"
                },
                {
                  "col_offset": 57,
                  "line_number": 164,
                  "name": "data",
                  "type": "dict"
                },
                {
                  "col_offset": 69,
                  "line_number": 164,
                  "name": "exp_error",
                  "type": "Exception"
                }
              ],
              "return_type": null,
              "signature": "check_write_template_error_case(template_path: str, data: dict, exp_error: Exception)"
            }
          ],
          "name": "test_helpers"
        },
        {
          "classes": [],
          "file_path": "tests/unit/test_check_consitency.py",
          "functions": [
            {
              "annotations": "",
              "body": "def create_notebook_and_convert_it(cells, script_name, conf, work_dir) -> str:\n    \"\"\"\n        Create a notebook from cells then convert it into a python script\n    \"\"\"\n    notebook_path = gen_notebook(tmp_dir=work_dir, file_name='test.ipynb', docstring=None, cells=cells)\n    script_base_path = join(work_dir, script_name)\n    export_to_script(notebook_path, script_base_path, conf)\n    return notebook_path, script_base_path",
              "col_offset": 5,
              "full_signature": "create_notebook_and_convert_it(cells, script_name, conf, work_dir) -> str",
              "line_number": 19,
              "name": "create_notebook_and_convert_it",
              "parameters": [
                {
                  "col_offset": 36,
                  "line_number": 19,
                  "name": "cells",
                  "type": null
                },
                {
                  "col_offset": 43,
                  "line_number": 19,
                  "name": "script_name",
                  "type": null
                },
                {
                  "col_offset": 56,
                  "line_number": 19,
                  "name": "conf",
                  "type": null
                },
                {
                  "col_offset": 62,
                  "line_number": 19,
                  "name": "work_dir",
                  "type": null
                }
              ],
              "return_type": "str",
              "signature": "create_notebook_and_convert_it(cells, script_name, conf, work_dir) -> str"
            }
          ],
          "name": "test_check_consitency"
        },
        {
          "classes": [],
          "file_path": "tests/helpers/utils.py",
          "functions": [
            {
              "annotations": "",
              "body": "def gen_notebook(cells: List[Tuple[str, str]], tmp_dir: str, file_name: str,\n                 docstring: str = None, header: str = None):\n    nb = nbf.v4.new_notebook()\n    if header:\n        nb['cells'].append(nbf.v4.new_markdown_cell(header))\n    if docstring:\n        nb['cells'].append(nbf.v4.new_code_cell(docstring))\n    for type, cell_content in cells:\n        if type == 'code':\n            nb_cell = to_notebook_code_cell(cell_content)\n        else:\n            nb_cell = to_notebook_comment_cell(cell_content)\n        nb['cells'].append(nb_cell)\n    notebook_path = join(tmp_dir, file_name)\n    nbf.write(nb, notebook_path)\n    return notebook_path",
              "col_offset": 5,
              "full_signature": "gen_notebook(cells: List[Tuple[str, str]], tmp_dir: str, file_name: str, docstring: str, header: str)",
              "line_number": 10,
              "name": "gen_notebook",
              "parameters": [
                {
                  "col_offset": 18,
                  "line_number": 10,
                  "name": "cells",
                  "type": "List[Tuple[str, str]]"
                },
                {
                  "col_offset": 48,
                  "line_number": 10,
                  "name": "tmp_dir",
                  "type": "str"
                },
                {
                  "col_offset": 62,
                  "line_number": 10,
                  "name": "file_name",
                  "type": "str"
                },
                {
                  "col_offset": 18,
                  "line_number": 11,
                  "name": "docstring",
                  "type": "str"
                },
                {
                  "col_offset": 41,
                  "line_number": 11,
                  "name": "header",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "gen_notebook(cells: List[Tuple[str, str]], tmp_dir: str, file_name: str, docstring: str, header: str)"
            },
            {
              "annotations": "",
              "body": "def to_notebook_code_cell(cell_content: str) -> nbf.NotebookNode:\n    return nbf.v4.new_code_cell(cell_content)",
              "col_offset": 5,
              "full_signature": "to_notebook_code_cell(cell_content: str) -> nbf.NotebookNode",
              "line_number": 28,
              "name": "to_notebook_code_cell",
              "parameters": [
                {
                  "col_offset": 27,
                  "line_number": 28,
                  "name": "cell_content",
                  "type": "str"
                }
              ],
              "return_type": "nbf.NotebookNode",
              "signature": "to_notebook_code_cell(cell_content: str) -> nbf.NotebookNode"
            },
            {
              "annotations": "",
              "body": "def to_notebook_comment_cell(cell_content: str) -> nbf.NotebookNode:\n    return nbf.v4.new_markdown_cell(cell_content)",
              "col_offset": 5,
              "full_signature": "to_notebook_comment_cell(cell_content: str) -> nbf.NotebookNode",
              "line_number": 32,
              "name": "to_notebook_comment_cell",
              "parameters": [
                {
                  "col_offset": 30,
                  "line_number": 32,
                  "name": "cell_content",
                  "type": "str"
                }
              ],
              "return_type": "nbf.NotebookNode",
              "signature": "to_notebook_comment_cell(cell_content: str) -> nbf.NotebookNode"
            },
            {
              "annotations": "",
              "body": "def write_conf(work_dir: str, conf_path: str, ignore_keys: List[str] = None,\n               script_dir: str = None, dvc_cmd_dir: str = None,\n               dvc_py_cmd_path: str = None, dvc_py_cmd_name: str = None,\n               dvc_meta_file_name: str = None, docstring_conf: str = None) -> dict:\n    ignore_keys = ignore_keys or []\n    script_dir = script_dir or join('script')\n    dvc_cmd_dir = dvc_cmd_dir or join('cmd', 'dvc')\n    makedirs(join(work_dir, script_dir), exist_ok=True)\n    makedirs(join(work_dir, dvc_cmd_dir), exist_ok=True)\n    conf_data = {\n        'path': {\n            'python_script_root_dir': script_dir,\n            'dvc_cmd_root_dir': dvc_cmd_dir\n        },\n        'ignore_keys': ignore_keys,\n    }\n    if dvc_py_cmd_name:\n        conf_data['dvc_var_python_cmd_name'] = dvc_py_cmd_name\n    if dvc_py_cmd_path:\n        conf_data['dvc_var_python_cmd_path'] = dvc_py_cmd_path\n    if dvc_meta_file_name:\n        conf_data['dvc_var_meta_filename'] = dvc_meta_file_name\n    if docstring_conf:\n        conf_data['docstring_conf'] = docstring_conf\n    with open(conf_path, 'w') as fd:\n        json.dump(conf_data, fd)\n    return conf_data",
              "col_offset": 5,
              "full_signature": "write_conf(work_dir: str, conf_path: str, ignore_keys: List[str], script_dir: str, dvc_cmd_dir: str, dvc_py_cmd_path: str, dvc_py_cmd_name: str, dvc_meta_file_name: str, docstring_conf: str) -> dict",
              "line_number": 36,
              "name": "write_conf",
              "parameters": [
                {
                  "col_offset": 16,
                  "line_number": 36,
                  "name": "work_dir",
                  "type": "str"
                },
                {
                  "col_offset": 31,
                  "line_number": 36,
                  "name": "conf_path",
                  "type": "str"
                },
                {
                  "col_offset": 47,
                  "line_number": 36,
                  "name": "ignore_keys",
                  "type": "List[str]"
                },
                {
                  "col_offset": 16,
                  "line_number": 37,
                  "name": "script_dir",
                  "type": "str"
                },
                {
                  "col_offset": 40,
                  "line_number": 37,
                  "name": "dvc_cmd_dir",
                  "type": "str"
                },
                {
                  "col_offset": 16,
                  "line_number": 38,
                  "name": "dvc_py_cmd_path",
                  "type": "str"
                },
                {
                  "col_offset": 45,
                  "line_number": 38,
                  "name": "dvc_py_cmd_name",
                  "type": "str"
                },
                {
                  "col_offset": 16,
                  "line_number": 39,
                  "name": "dvc_meta_file_name",
                  "type": "str"
                },
                {
                  "col_offset": 48,
                  "line_number": 39,
                  "name": "docstring_conf",
                  "type": "str"
                }
              ],
              "return_type": "dict",
              "signature": "write_conf(work_dir: str, conf_path: str, ignore_keys: List[str], script_dir: str, dvc_cmd_dir: str, dvc_py_cmd_path: str, dvc_py_cmd_name: str, dvc_meta_file_name: str, docstring_conf: str) -> dict"
            },
            {
              "annotations": "",
              "body": "def write_min_script(script_path: str, docstring: str = None):\n    docstring = docstring or '\"\"\" A description \"\"\"'\n    python_script = 'def my_funct():\\n' \\\n                    f'\\t{docstring}\\n' \\\n                    '\\tpass\\n'\n    with open(script_path, 'w') as fd:\n        fd.write(python_script)",
              "col_offset": 5,
              "full_signature": "write_min_script(script_path: str, docstring: str)",
              "line_number": 65,
              "name": "write_min_script",
              "parameters": [
                {
                  "col_offset": 22,
                  "line_number": 65,
                  "name": "script_path",
                  "type": "str"
                },
                {
                  "col_offset": 40,
                  "line_number": 65,
                  "name": "docstring",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "write_min_script(script_path: str, docstring: str)"
            },
            {
              "annotations": "",
              "body": "def write_dvc_file(path: str, cmd: str, deps: List[str], outs: List[str]):\n    data = {'cmd': cmd,\n            'deps': [{'path': dep} for dep in deps],\n            'outs': [{'path': out} for out in outs]}\n    with open(path, 'w') as fd:\n        yaml.dump(data, fd)",
              "col_offset": 5,
              "full_signature": "write_dvc_file(path: str, cmd: str, deps: List[str], outs: List[str])",
              "line_number": 74,
              "name": "write_dvc_file",
              "parameters": [
                {
                  "col_offset": 20,
                  "line_number": 74,
                  "name": "path",
                  "type": "str"
                },
                {
                  "col_offset": 31,
                  "line_number": 74,
                  "name": "cmd",
                  "type": "str"
                },
                {
                  "col_offset": 41,
                  "line_number": 74,
                  "name": "deps",
                  "type": "List[str]"
                },
                {
                  "col_offset": 58,
                  "line_number": 74,
                  "name": "outs",
                  "type": "List[str]"
                }
              ],
              "return_type": null,
              "signature": "write_dvc_file(path: str, cmd: str, deps: List[str], outs: List[str])"
            }
          ],
          "name": "utils"
        },
        {
          "classes": [],
          "file_path": "tests/functional/ipynb_to_dvc/test_cmd_arguments.py",
          "functions": [
            {
              "annotations": "",
              "body": "def write_test_conf(work_dir: str, conf_path: str = None):\n    dvc_dir = join(work_dir, 'dvc')\n    script_dir = join(work_dir, 'scritps')\n    conf_path = conf_path if conf_path else join(work_dir, DEFAULT_CONF_FILENAME)\n    write_conf(work_dir=work_dir, conf_path=conf_path,\n               script_dir=script_dir, dvc_cmd_dir=dvc_dir)\n    return script_dir, dvc_dir",
              "col_offset": 5,
              "full_signature": "write_test_conf(work_dir: str, conf_path: str)",
              "line_number": 29,
              "name": "write_test_conf",
              "parameters": [
                {
                  "col_offset": 21,
                  "line_number": 29,
                  "name": "work_dir",
                  "type": "str"
                },
                {
                  "col_offset": 36,
                  "line_number": 29,
                  "name": "conf_path",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "write_test_conf(work_dir: str, conf_path: str)"
            }
          ],
          "name": "test_cmd_arguments"
        },
        {
          "classes": [],
          "file_path": "tests/functional/ipynb_to_python/test_generated_content.py",
          "functions": [
            {
              "annotations": "",
              "body": "def is_in(expected: str, file_content: str):\n    sanitized_expected = expected.replace('\\n', '').replace(' ', '')\n    sanitized_file_content = file_content.replace('\\n', '').replace(' ', '')\n\n    return sanitized_expected in sanitized_file_content",
              "col_offset": 5,
              "full_signature": "is_in(expected: str, file_content: str)",
              "line_number": 11,
              "name": "is_in",
              "parameters": [
                {
                  "col_offset": 11,
                  "line_number": 11,
                  "name": "expected",
                  "type": "str"
                },
                {
                  "col_offset": 26,
                  "line_number": 11,
                  "name": "file_content",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "is_in(expected: str, file_content: str)"
            },
            {
              "annotations": "",
              "body": "def generate_test_notebook(work_dir: str, notebook_name: str):\n    docstring = '\"\"\"\\n' \\\n                ':param str subset: The kind of subset to generate.\\n' \\\n                ':param int rate:\\n' \\\n                ':dvc-out output_file: {{ conf.output_file }}\\n' \\\n                '\"\"\"\\n'\n    docstring_cell = ('code', '#Parameters\\n{}subset = \"train\"\\n'.format(docstring))\n    code_cells = [\n        ('code',\n         'import numpy as np\\n'\n         'import pandas as pd\\n'\n         'from sklearn.datasets import fetch_20newsgroups\\n'),\n        ('code',\n         'newsgroups_train = fetch_20newsgroups(subset=subset,\\n'\n         '            remove=(\"headers\", \"footers\", \"quotes\"))'),\n        ('code', 'df_train.to_csv(\"data_train.csv\", index=None)')\n    ]\n    comment_cell = ('markdown', 'This is a comment cell')\n    no_effect_cells = [('code', '# Ignore\\n# No effect'\n                                'df_train = pd.DataFrame(newsgroups_train.data, columns=[\"data\"])'),\n                       ('code', '# No effect\\ndf_train')]\n    trailing_comment = ('markdown', 'This is a trailing comment cell')\n    traling_no_effect = ('code', '# No effect\\ntrailing = 2')\n\n    cells = [\n        docstring_cell,\n        code_cells[0],\n        code_cells[1],\n        comment_cell,\n        no_effect_cells[0],\n        no_effect_cells[1],\n\n        code_cells[2],\n        traling_no_effect,\n        trailing_comment\n    ]\n\n    notebook_path = gen_notebook(cells, work_dir, notebook_name)\n    dropped_cells = DroppedCells(no_effect_cells, [trailing_comment, traling_no_effect], docstring_cell)\n    kept_cells = KeptCells(code_cells, [comment_cell])\n    return kept_cells, dropped_cells, docstring, notebook_path",
              "col_offset": 5,
              "full_signature": "generate_test_notebook(work_dir: str, notebook_name: str)",
              "line_number": 22,
              "name": "generate_test_notebook",
              "parameters": [
                {
                  "col_offset": 28,
                  "line_number": 22,
                  "name": "work_dir",
                  "type": "str"
                },
                {
                  "col_offset": 43,
                  "line_number": 22,
                  "name": "notebook_name",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "generate_test_notebook(work_dir: str, notebook_name: str)"
            },
            {
              "annotations": "",
              "body": "def check_content(docstring: str, kept_cells: KeptCells, dropped_cells: DroppedCells, file_content):\n    assert is_in(docstring, file_content), 'Docstring not found in generated script'\n\n    for _, cell in kept_cells.code:\n        assert is_in(cell, file_content), f'Code cell {cell} not found in generated script'\n    for _, cell in kept_cells.comment:\n        assert is_in(cell, file_content), f'Comment cell {cell} not found in generated script'\n\n    for _, cell in dropped_cells.no_effect:\n        assert not is_in(cell, file_content), f'No effect cell {cell} must be dropped'\n    for _, cell in dropped_cells.trailing:\n        assert not is_in(cell, file_content), f'Trailing cell {cell} must be dropped'\n    assert not is_in(dropped_cells.docstring_cell[1], file_content), f'Docstring cell {cell} must be dropped'",
              "col_offset": 5,
              "full_signature": "check_content(docstring: str, kept_cells: KeptCells, dropped_cells: DroppedCells, file_content)",
              "line_number": 65,
              "name": "check_content",
              "parameters": [
                {
                  "col_offset": 19,
                  "line_number": 65,
                  "name": "docstring",
                  "type": "str"
                },
                {
                  "col_offset": 35,
                  "line_number": 65,
                  "name": "kept_cells",
                  "type": "KeptCells"
                },
                {
                  "col_offset": 58,
                  "line_number": 65,
                  "name": "dropped_cells",
                  "type": "DroppedCells"
                },
                {
                  "col_offset": 87,
                  "line_number": 65,
                  "name": "file_content",
                  "type": null
                }
              ],
              "return_type": null,
              "signature": "check_content(docstring: str, kept_cells: KeptCells, dropped_cells: DroppedCells, file_content)"
            }
          ],
          "name": "test_generated_content"
        },
        {
          "classes": [],
          "file_path": "tests/functional/ipynb_to_python/test_conf.py",
          "functions": [
            {
              "annotations": "",
              "body": "def setup_with_conf(work_dir: str, conf_path: str) -> Tuple[str, str]:\n    write_conf(work_dir=work_dir, conf_path=conf_path, script_dir='./test_scripts')\n    nb_path = gen_notebook([('markdown', '# test')], work_dir, 'nb_test.ipynb')\n    return conf_path, nb_path",
              "col_offset": 5,
              "full_signature": "setup_with_conf(work_dir: str, conf_path: str) -> Tuple[str, str]",
              "line_number": 9,
              "name": "setup_with_conf",
              "parameters": [
                {
                  "col_offset": 21,
                  "line_number": 9,
                  "name": "work_dir",
                  "type": "str"
                },
                {
                  "col_offset": 36,
                  "line_number": 9,
                  "name": "conf_path",
                  "type": "str"
                }
              ],
              "return_type": "Tuple[str, str]",
              "signature": "setup_with_conf(work_dir: str, conf_path: str) -> Tuple[str, str]"
            }
          ],
          "name": "test_conf"
        },
        {
          "classes": [],
          "file_path": "tests/functional/gen_dvc/test_conf.py",
          "functions": [
            {
              "annotations": "",
              "body": "def write_docstring_conf(path: str, output_file: str):\n    with open(path, 'w') as fd:\n        yaml.dump({'out_file': output_file}, fd)",
              "col_offset": 5,
              "full_signature": "write_docstring_conf(path: str, output_file: str)",
              "line_number": 11,
              "name": "write_docstring_conf",
              "parameters": [
                {
                  "col_offset": 26,
                  "line_number": 11,
                  "name": "path",
                  "type": "str"
                },
                {
                  "col_offset": 37,
                  "line_number": 11,
                  "name": "output_file",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "write_docstring_conf(path: str, output_file: str)"
            },
            {
              "annotations": "",
              "body": "def setup_with_conf(work_dir: str, conf_path: str = None, docstring_conf_path: str = None) -> Tuple[str, str]:\n    write_conf(work_dir=work_dir, conf_path=conf_path, ignore_keys=['# Ignore'],\n               dvc_cmd_dir='./dvc_cmd', docstring_conf=docstring_conf_path)\n    script_path = join(work_dir, 'script_path.py')\n    docstring = '\"\"\"\\n:param out:\\n:dvc-out out: {{ conf.out_file }}\\n\"\"\"' if docstring_conf_path else None\n    write_min_script(script_path, docstring)\n    return conf_path, script_path",
              "col_offset": 5,
              "full_signature": "setup_with_conf(work_dir: str, conf_path: str, docstring_conf_path: str) -> Tuple[str, str]",
              "line_number": 16,
              "name": "setup_with_conf",
              "parameters": [
                {
                  "col_offset": 21,
                  "line_number": 16,
                  "name": "work_dir",
                  "type": "str"
                },
                {
                  "col_offset": 36,
                  "line_number": 16,
                  "name": "conf_path",
                  "type": "str"
                },
                {
                  "col_offset": 59,
                  "line_number": 16,
                  "name": "docstring_conf_path",
                  "type": "str"
                }
              ],
              "return_type": "Tuple[str, str]",
              "signature": "setup_with_conf(work_dir: str, conf_path: str, docstring_conf_path: str) -> Tuple[str, str]"
            }
          ],
          "name": "test_conf"
        },
        {
          "classes": [],
          "file_path": "tests/functional/check_all_script_consistency/test_content_consistency.py",
          "functions": [
            {
              "annotations": "",
              "body": "def write_script(path: str, content: str):\n    name = basename(path).replace('.py', '')\n    script_content = f'''\n#!/usr/bin/env python3\nimport argparse\ndef {name}():\n    {content}\n    print(\"end\")\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Command for script {name}')\n    args = parser.parse_args()\n    {name}()\n'''\n    with open(path, 'w') as fd:\n        fd.write(script_content)",
              "col_offset": 5,
              "full_signature": "write_script(path: str, content: str)",
              "line_number": 29,
              "name": "write_script",
              "parameters": [
                {
                  "col_offset": 18,
                  "line_number": 29,
                  "name": "path",
                  "type": "str"
                },
                {
                  "col_offset": 29,
                  "line_number": 29,
                  "name": "content",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "write_script(path: str, content: str)"
            }
          ],
          "name": "test_content_consistency"
        },
        {
          "classes": [],
          "file_path": "tests/large/gen_dvc/data/write_name.py",
          "functions": [
            {
              "annotations": "",
              "body": "def mlvtools_write_hello_in_file(input_file: str, output_file: str, name: str):\n    \"\"\"\n    :param str input_file: path to the input file\n    :param str output_file: path to the output file\n    :param str name: your name\n    :dvc-in input_file: {{conf.input_file}}\n    :dvc-out output_file: {{conf.output_file}}\n    :dvc-extra: --name {{conf.name}}\n    \"\"\"\n    marker_path = join(dirname(output_file), 'ran.once')\n    first_run = not exists(marker_path)\n    if first_run:\n        with open(marker_path, 'w') as fd:\n            fd.write(' ')\n\n    with open(output_file, 'w') as fd:\n        suffix = 'First run' if first_run else 'Not the first run'\n        fd.write(f'Hello {name}! {suffix}')",
              "col_offset": 5,
              "full_signature": "mlvtools_write_hello_in_file(input_file: str, output_file: str, name: str)",
              "line_number": 6,
              "name": "mlvtools_write_hello_in_file",
              "parameters": [
                {
                  "col_offset": 34,
                  "line_number": 6,
                  "name": "input_file",
                  "type": "str"
                },
                {
                  "col_offset": 51,
                  "line_number": 6,
                  "name": "output_file",
                  "type": "str"
                },
                {
                  "col_offset": 69,
                  "line_number": 6,
                  "name": "name",
                  "type": "str"
                }
              ],
              "return_type": null,
              "signature": "mlvtools_write_hello_in_file(input_file: str, output_file: str, name: str)"
            }
          ],
          "name": "write_name"
        },
        {
          "classes": [],
          "file_path": "tests/large/gen_dvc/data/script.py",
          "functions": [
            {
              "annotations": "",
              "body": "def mlvtools_notebook(sanitized_data: str, octal_data: str, binary_data: str, size_bin_data: int):\n    \"\"\"\n    :param str sanitized_data: path to input sanitized data\n    :param str octal_data: path to octal data output file\n    :param str binary_data: path to binary data output file\n    :param int size_bin_data: number of bits in a binary value\n    :dvc-in sanitized_data: ./dummy/data/sanitized_data.txt\n    :dvc-out octal_data: ./dummy/data/octal_data.txt\n    :dvc-out binary_data: ./dummy/data/binary_data.txt\n    :dvc-extra: --size-bin-data 8\n    \"\"\"\n    with open(sanitized_data, 'r') as fd:\n        data = fd.read()\n\n    binaries = [d for d in data.split() if len(d.split('=')[1]) >= size_bin_data]\n\n    octals = [d for d in data.split() if len(d.split('=')[1]) == 3]\n\n    with open(octal_data, 'w') as fd:\n        fd.write(' '.join(octals))\n\n    with open(binary_data, 'w') as fd:\n        fd.write(' '.join(binaries))",
              "col_offset": 5,
              "full_signature": "mlvtools_notebook(sanitized_data: str, octal_data: str, binary_data: str, size_bin_data: int)",
              "line_number": 6,
              "name": "mlvtools_notebook",
              "parameters": [
                {
                  "col_offset": 23,
                  "line_number": 6,
                  "name": "sanitized_data",
                  "type": "str"
                },
                {
                  "col_offset": 44,
                  "line_number": 6,
                  "name": "octal_data",
                  "type": "str"
                },
                {
                  "col_offset": 61,
                  "line_number": 6,
                  "name": "binary_data",
                  "type": "str"
                },
                {
                  "col_offset": 79,
                  "line_number": 6,
                  "name": "size_bin_data",
                  "type": "int"
                }
              ],
              "return_type": null,
              "signature": "mlvtools_notebook(sanitized_data: str, octal_data: str, binary_data: str, size_bin_data: int)"
            }
          ],
          "name": "script"
        },
        {
          "classes": [],
          "file_path": "tests/unit/diff/test_parse.py",
          "functions": [
            {
              "annotations": "",
              "body": "def script_base() -> str:\n    python_content = \"\"\"\n# This is a comment\nimport os\nfrom Typing import List\n\ndef list_dir(dir_path:str) -> List[str]:\n    ''' A docstring '''\n    return os.listdir(dir_path)\n\nprint('Hello !!')\nprint(list_dir('/tmp'))\n\"\"\"\n    return python_content",
              "col_offset": 5,
              "full_signature": "script_base() -> str",
              "line_number": 47,
              "name": "script_base",
              "parameters": [],
              "return_type": "str",
              "signature": "script_base() -> str"
            },
            {
              "annotations": "",
              "body": "def get_script_base_spaces_and_blank() -> str:\n    python_content = \"\"\"\n# This is a comment\nimport os\nfrom Typing import List\n\n\n\n\n\ndef list_dir(dir_path:str) -> List[str]:\n    ''' A docstring '''\n    return os.listdir(dir_path)\n\nprint('Hello !!')\nprint(list_dir('/tmp'))\n\"\"\"\n    return python_content",
              "col_offset": 5,
              "full_signature": "get_script_base_spaces_and_blank() -> str",
              "line_number": 63,
              "name": "get_script_base_spaces_and_blank",
              "parameters": [],
              "return_type": "str",
              "signature": "get_script_base_spaces_and_blank() -> str"
            },
            {
              "annotations": "",
              "body": "def get_script_diff_comment() -> str:\n    python_content = \"\"\"\n# This is a different comment\nimport os\nfrom Typing import List\n\ndef list_dir(dir_path:str) -> List[str]:\n    ''' A docstring '''\n    # This a new comment\n    return os.listdir(dir_path)\n\nprint('Hello !!')\nprint(list_dir('/tmp'))\n\"\"\"\n    return python_content",
              "col_offset": 5,
              "full_signature": "get_script_diff_comment() -> str",
              "line_number": 83,
              "name": "get_script_diff_comment",
              "parameters": [],
              "return_type": "str",
              "signature": "get_script_diff_comment() -> str"
            },
            {
              "annotations": "",
              "body": "def get_script_diff_docstring() -> str:\n    python_content = \"\"\"\n# This is a comment\nimport os\nfrom Typing import List\n\ndef list_dir(dir_path:str) -> List[str]:\n    ''' A different docstring '''\n    return os.listdir(dir_path)\n\nprint('Hello !!')\nprint(list_dir('/tmp'))\n\"\"\"\n    return python_content",
              "col_offset": 5,
              "full_signature": "get_script_diff_docstring() -> str",
              "line_number": 100,
              "name": "get_script_diff_docstring",
              "parameters": [],
              "return_type": "str",
              "signature": "get_script_diff_docstring() -> str"
            },
            {
              "annotations": "",
              "body": "def get_script_diff() -> str:\n    python_content = \"\"\"\n# This is a comment\nimport os\nfrom Typing import List\n\ndef list_dir(dir_path:str) -> List[str]:\n    ''' A docstring '''\n    return dir_path\n\nprint('Hello !!')\nprint(list_dir('/tmp'))\n\"\"\"\n    return python_content",
              "col_offset": 5,
              "full_signature": "get_script_diff() -> str",
              "line_number": 116,
              "name": "get_script_diff",
              "parameters": [],
              "return_type": "str",
              "signature": "get_script_diff() -> str"
            }
          ],
          "name": "test_parse"
        }
      ],
      "name": "mlvtools",
      "pypi_tag": "2.1.1",
      "url": "https://github.com/peopledoc/mlvtools"
    }
  ]
}
