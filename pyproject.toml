[project]
name = "strds"
description = "Python module for generating datasets"
authors = [{ name = "LuKrO2011", email = "<lukas.krodinger@gmail.com>" }]
version = "0.1.0"
readme = "README.md"
requires-python = ">=3.13"
packages = [
    { include = "strds", from = "src" }
]
include = [
    { path = "tests", format = "sdist" }
]

[tool.poetry.scripts]
mine = "strds.mine:cli"
dataset = "strds.dataset:cli"
provide = "strds.provide:cli"

[tool.poetry.dependencies]
python = "^3.13"
rich = "^13.9.4"
gitpython = "^3.1.43"
click = "^8.1.8"
libcst = "^1.6.0"
pytest = "^8.3.4"
defusedxml = "^0.7.1"
pandas = "^2.2.3"
requests = "^2.32.3"
tqdm = "^4.67.1"
beautifulsoup4 = "^4.13.1"


[tool.poetry.group.dev.dependencies]
black = "^24.10.0"
isort = "^5.13.2"
mypy = "^1.14.1"
pre-commit = "^4.0.1"
pylint = "^3.3.3"
pyupgrade = "^3.19.1"
ruff = "^0.9.1"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
pytest-sugar = "^1.0.0"
pytest-cov = "^6.0.0"


[tool.black]
line-length = 88
target_version = ["py311"]
include = '\.pyi?$'


[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
indent = "    "


[tool.mypy]
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
strict_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
strict = true


[[tool.mypy.overrides]]
module = "project_template.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.pytest.ini_options]
pythonpath = ["src"]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"


[tool.coverage.run]
branch = true
source = ["src/project_template", "tests"]
omit = ["tests/fixtures/*"]


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:"
]


[tool.coverage.html]
directory = "cov_html"


[tool.ruff]
# Assume Python 3.10.
target-version = "py310"
line-length = 100
preview = true
src = ["src", "tests"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "docs",
    "node_modules",
    "venv",
    "tests/fixtures/*.py",
    "tests/fixtures/*.pyi",
]

[tool.ruff.lint]
select = [
    "A",     # flake8-builtins
    "ARG",   # flake8-unused-arguments
    "B",     # bugbear
    "BLE",   # flake8-blind-except
    "CPY",   # flake8-copyright
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "D",     # pydocstyle
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle
    "ERA",   # flake8-eradicate
    "F",     # pyflakes
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "FURB",  # refurb
    "G",     # flake8-logging-format
    "ICN",   # flake8-import-conventions
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # flake8-naming
    "NPY",   # numpy
    "PERF",  # perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # ruff
    "S",     # flake8-bandig
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "TCH",   # flake8-type-checking
    "TID",   # flake8-tidy-imports
    "T20",   # flake8-print
    "UP",    # pyupgrade
    "W",     # pycodestyle
]
ignore = [
    "ARG002",   # unused method argument
    "B019",     # functools.lru_cache might cause memory leaks
    "CPY001",   # missing copyright notice at top of file
    "D105",     # missing docstrings in magic methods
    "FIX002",   # valid TODO comments
    "ISC001",   # conflicts with ruff-format
    "PLR0911",  # do not complain about too many return statements
    "PLR0912",  # do not complain about too many branches
    "PLR0913",  # do not complain about too many arguments to function call
    "PLR2004",  # magic values in comparisons
    "PLR6301",  # method could be a function, class method, or static method
    "RUF003",   # comment contains ambiguous en dash
    "S101",     # do not complain about using assert statements
]
# Allow unused variables when underscore-prefixed:
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "PT006",  # Wrong name(s) type in `@pytest.mark.parameterize`, expected `tuple`
    "S101",   # Use of `assert` detected
    "SLF001", # Private member accessed
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
